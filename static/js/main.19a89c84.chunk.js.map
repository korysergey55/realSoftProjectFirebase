{"version":3,"sources":["stores/authAPI.ts","stores/saunter.ts","stores/index.ts","components/Loader/styles.module.scss","config.ts","utils/history.ts","components/PrivateRoute/index.tsx","components/Loader/index.tsx","containers/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["action","bound","makeAutoObservable","this","authData","auth","tokenData","accessToken","axios","post","response","setAuthAPI","console","log","setAccessTokenAPI","observable","localStorage","getItem","JSON","parse","reaction","item","_","toJS","modal","itemData","data","distance","markerArr","userArrMarkers","filteredUserPath","userPath","setItem","stringify","setUserPath","remuved","filter","id","favorite","formatData","toLowerCase","trim","filtered","path","title","includes","configure","enforceActions","RootStore","authAPI","sounterStore","rootStore","StoreContext","createContext","useStore","store","useContext","Error","module","exports","create","baseURL","process","REACT_APP_HOST","interceptors","use","error","Promise","reject","createBrowserHistory","PrivateRoute","exact","component","to","Loader","className","styles","loader","type","color","height","width","timeout","loadingText","MainPage","lazy","SaunterPage","App","history","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19a89c84.chunk.js","sourcesContent":["import axios from 'axios'\n// import { api } from './../utils/api'\nimport {\n  makeAutoObservable,\n  observable,\n  action,\n  // configure,\n  // computed,\n  // runInAction,\n  // reaction,\n  // toJS,\n} from 'mobx'\n\nclass AuthAPI {\n  @observable auth: any = null\n  @observable accessToken: string = localStorage.getItem('accessToken')\n    ? JSON.parse(localStorage.getItem('accessToken') as string)\n    : null\n\n  constructor() {\n    makeAutoObservable(this)\n    // reaction(\n    //   () => this.accessToken,\n    //   _ => console.log(toJS(this.accessToken))\n    // )\n  }\n  @action.bound setAuthAPI(authData: any) {\n    this.auth = authData\n  }\n  @action.bound setAccessTokenAPI(tokenData: any) {\n    this.accessToken = tokenData\n  }\n\n  @action async fetchAuthGoogleAPI(authData: any) {\n    const BASE_URL =\n      'https://realsoftproject-5d44c-default-rtdb.firebaseio.com/'\n    try {\n      const response = await axios.post(`${BASE_URL}`, { ...authData })\n      this.setAuthAPI(response)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  @action async fetchAuthFacebookAPI(authData: any) {\n    const BASE_URL =\n      'https://realsoftproject-5d44c-default-rtdb.firebaseio.com/'\n    try {\n      const response = await axios.post(`${BASE_URL}`, { ...authData })\n      this.setAuthAPI(response)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  @action async fetchTokenAPI(tokenData: any) {\n    const BASE_URL =\n      'https://realsoftproject-5d44c-default-rtdb.firebaseio.com/'\n    try {\n      const response = await axios.post(`${BASE_URL}`, { ...tokenData })\n      this.setAccessTokenAPI(response)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport default new AuthAPI()\n\n// @action async fetchForecast(sity: string) {\n//   const response = await api.get(`/weather`, {\n//     params: {\n//       q: sity,\n//       units: 'metric',\n//       appid: process.env.REACT_APP_API_KEY,\n//       lang: this.lenguage,\n//     },\n//   })\n//   this.setForecast(response.data)\n// }\n// @action.bound setForecast(newForecastApi: IWeather) {\n//   this.forecast = [newForecastApi]\n// }\n\n// @action async fetchAuthAPI(authData: any) {\n//   const BASE_URL = 'http://localhost:3000/products'\n//   const options = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify(authData),\n//   }\n//   const response = await fetch(`${BASE_URL}`, options)\n//   const res = await response.json()\n//   this.setAuth(res)\n//   // await axios.post(`${BASE_URL}${product}`).then(res => {\n//   //   this.setAllProductApi(res)\n//   // })\n// }\n\n// @action.bound setTokenAPI(tokenhData: any) {\n//   this.token = tokenhData\n// }\n// @action async fetchProductsAPI(page: number = 1) {\n//   const BASE_URL = 'http://localhost:3000/products'\n//   await fetch(`${BASE_URL}?_page=${page}&_limit=9`)\n//     .then(res => res.json())\n//     .then(products => {\n//       this.setTokenAPI(products)\n//     })\n// }\n","// import IList from 'models/index'\nimport {\n  makeAutoObservable,\n  observable,\n  action,\n  // configure,\n  // computed,\n  // runInAction,\n  reaction,\n  toJS,\n} from 'mobx'\n\nclass SounterStore {\n  @observable modal: boolean = false\n  @observable item: any = null\n  @observable distance: number = 0\n  @observable userArrMarkers: any = null\n  @observable userPath: any[] = []\n  @observable filteredUserPath: any[] = localStorage.getItem('userPath')\n    ? JSON.parse(localStorage.getItem('userPath') as string)\n    : []\n\n  constructor() {\n    makeAutoObservable(this)\n    reaction(\n      () => this.item,\n      _ => console.log(toJS(this.item))\n    )\n  }\n  @action setModal() {\n    this.modal = !this.modal\n  }\n  @action setItem(itemData: any) {\n    this.item = itemData\n  }\n  @action setDistance(data: number) {\n    this.distance = data\n  }\n  @action setUserMarkers(markerArr: any) {\n    this.userArrMarkers = markerArr\n  }\n  @action setUserPath(data: any) {\n    this.filteredUserPath = [...data]\n    this.userPath = [...data]\n    localStorage.setItem('userPath', JSON.stringify(this.userPath))\n  }\n  @action addUserPath(data: any) {\n    this.setUserPath([...this.userPath, data])\n    // this.filteredUserPath = [...this.userPath, data]\n    // this.userPath = [...this.userPath, data]\n    // localStorage.setItem('userPath', JSON.stringify(this.userPath))\n  }\n  @action removeUserPath(data: string) {\n    const remuved = this.filteredUserPath.filter(item => item.id !== data)\n    this.setUserPath(remuved)\n    // this.filteredUserPath = remuved\n    // localStorage.setItem('userPath', JSON.stringify(remuved))\n  }\n  @action setFavorite() {\n    this.item.favorite = !this.item.favorite\n  }\n  @action getFilterUserPath(data: any) {\n    const formatData = data.toLowerCase().trim()\n    const filtered: any = this.userPath.filter(path =>\n      path.title.toLowerCase().includes(formatData)\n    )\n    this.filteredUserPath = filtered\n  }\n}\n\nexport default new SounterStore()\n","import authAPI from './authAPI'\nimport sounterStore from './saunter'\nimport { createContext, useContext } from 'react'\nimport { configure, observable } from 'mobx'\nconfigure({ enforceActions: 'observed' })\n\nclass RootStore {\n  @observable authAPI = authAPI\n  @observable sounterStore = sounterStore\n}\n\nconst rootStore = new RootStore()\n\nexport const StoreContext = createContext<RootStore>(rootStore)\n\nexport const useStore = (): RootStore => {\n  const store = useContext(StoreContext)\n  if (!store) {\n    throw new Error('You have forgot to use StoreProvider, shame on you.')\n  }\n  return store\n}\n\nexport default new RootStore()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"styles_loader__38z53\",\"loadingText\":\"styles_loadingText__2HtH7\"};","import axios from 'axios'\n\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_HOST,\n})\n\n// here you can define constant's for project or inintial configuration for packages\n\n// response middleware\napi.interceptors.response.use(\n  response => {\n    // here you can check authorized user or not (401) or something global response functions\n    return response\n  },\n  error => {\n    // api error handler\n    return Promise.reject(error)\n  }\n)\n","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()\n","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { useStore } from 'stores'\n\nconst PrivateRoute: React.FC<any> = ({ path, exact, component }) => {\n  const { authAPI } = useStore()\n\n  return !authAPI.accessToken ? (\n    <Redirect to={'/'} />\n  ) : (\n    <Route path={path} exact={exact} component={component} />\n  )\n}\n\nexport default PrivateRoute\n","import React from 'react'\nimport styles from './styles.module.scss'\nimport Load from 'react-loader-spinner'\n\nconst Loader: React.FC = () => {\n  return (\n    <>\n      <div className={styles.loader}>\n        <Load\n          type=\"Circles\"\n          color=\"#227fcb\"\n          height={80}\n          width={80}\n          timeout={3000}\n        />\n        <h2 className={styles.loadingText}>...Loading</h2>\n      </div>\n    </>\n  )\n}\n\nexport default Loader\n","import React, { Suspense, lazy } from 'react'\nimport { Router, Switch, Route } from 'react-router'\nimport { Provider } from 'mobx-react'\nimport store from 'stores'\nimport history from 'utils/history'\nimport PrivateRoute from 'components/PrivateRoute'\nimport Loader from 'components/Loader'\n\n// import MainPage from 'containers/Public/MainPage'\n// import SaunterPage from 'containers/Public/SaunterPage'\n\nconst MainPage = lazy(() => import('containers/Public/MainPage'))\nconst SaunterPage = lazy(() => import('containers/Public/SaunterPage'))\n\nconst App = () => {\n  return (\n    <Provider {...store}>\n      <Router history={history}>\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <Route exact path=\"/\" component={MainPage} />\n            <PrivateRoute exact path=\"/sounter\" component={SaunterPage} />\n            {/* <Route exact path=\"/sounter\" component={SaunterPage} /> */}\n          </Switch>\n        </Suspense>\n      </Router>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import './config'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\n// normalize and basic styles for application\nimport 'normalize.css'\nimport 'antd/dist/antd.css'\nimport 'sources/styles/styles.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}