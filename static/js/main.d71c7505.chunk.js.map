{"version":3,"sources":["components/AppLoading/styles.module.scss","config.ts","utils/history.ts","components/AppLoading/index.tsx","stores/index.ts","containers/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","axios","create","baseURL","process","REACT_APP_HOST","interceptors","response","use","error","Promise","reject","createBrowserHistory","AppLoading","className","styles","loading","configure","enforceActions","RootStore","rootStore","createContext","App","state","initialized","render","store","history","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,SAAW,2B,mHCC5CC,EAAMC,OAAO,CAC9BC,QAASC,2IAAYC,iBAMnBC,aAAaC,SAASC,KACxB,SAAAD,GAEE,OAAOA,KAET,SAAAE,GAEE,OAAOC,QAAQC,OAAOF,M,kFCdXG,gB,iBCOAC,EANc,kBAC3B,yBAAKC,UAAWC,IAAOC,SACrB,0E,OCFJC,YAAU,CAAEC,eAAgB,a,IAEtBC,E,kCAIAC,EAAY,IAAID,EAYP,GAVaE,wBAAyBD,GAUtC,IAAID,GCOJG,E,4MAnBbC,MAAQ,CACNC,aAAa,G,EAGfC,OAAS,WACP,OACE,kBAAC,IAAaC,EACX,EAAKH,MAAMC,YACV,kBAAC,IAAD,CAAQG,QAASA,GACf,kBAAC,IAAD,OAGF,kBAAC,EAAD,Q,YAbQC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCPNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d71c7505.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"styles_loading__TxvR0\",\"Gradient\":\"styles_Gradient__uaPs4\"};","import axios from 'axios'\n\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_HOST,\n})\n\n// here you can define constant's for project or inintial configuration for packages\n\n// response middleware\napi.interceptors.response.use(\n  response => {\n    // here you can check authorized user or not (401) or something global response functions\n    return response\n  },\n  error => {\n    // api error handler\n    return Promise.reject(error)\n  }\n)\n","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()\n","import React from 'react'\nimport styles from './styles.module.scss'\n\nconst AppLoading: React.FC = () => (\n  <div className={styles.loading}>\n    <span>Application is loading, please wait...</span>\n  </div>\n)\n\nexport default AppLoading\n","import { createContext, useContext } from 'react'\nimport { configure, observable } from 'mobx'\n\nconfigure({ enforceActions: 'observed' })\n\nclass RootStore {\n  // @observable usersStore = usersStore\n}\n\nconst rootStore = new RootStore()\n\nexport const StoreContext = createContext<RootStore>(rootStore)\n\nexport const useStore = (): RootStore => {\n  const store = useContext(StoreContext)\n  if (!store) {\n    throw new Error('You have forgot to use StoreProvider, shame on you.')\n  }\n  return store\n}\n\nexport default new RootStore()\n","import React, { Component } from 'react'\nimport { Router, Switch, Route } from 'react-router'\nimport { Provider } from 'mobx-react'\nimport history from 'utils/history'\nimport AppLoading from 'components/AppLoading'\nimport Admin from '../Admin'\nimport store from 'stores'\n\nclass App extends Component {\n  state = {\n    initialized: false,\n  }\n\n  render = (): JSX.Element => {\n    return (\n      <Provider {...store}>\n        {this.state.initialized ? (\n          <Router history={history}>\n            <Switch>{/* <Route path=\"/\" component={Public} /> */}</Switch>\n          </Router>\n        ) : (\n          <AppLoading />\n        )}\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import './config'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\n// normalize and basic styles for application\nimport 'normalize.css'\nimport 'antd/dist/antd.css'\nimport 'sources/styles/styles.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}